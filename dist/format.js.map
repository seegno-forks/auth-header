{"version":3,"sources":["../src/format.js"],"names":["xxx","key","value","build","params","reduce","prev","values","transform","TypeError","Array","isArray","map","challenge","options","Object","keys","scheme","token","obj","join"],"mappings":";;;;;;;;;;AAAA;;;;AAEA,IAAMA,MAAM,SAANA,GAAM,CAACC,GAAD;AAAA,SAAS,UAACC,KAAD;AAAA,WAChBD,GADgB,UACTC,SAAS,CAAC,mBAAQA,KAAR,CAAV,GAA2B,iBAAMA,KAAN,CAA3B,GAA0CA,KADjC;AAAA,GAAT;AAAA,CAAZ;;AAGA,IAAMC,QAAQ,SAARA,KAAQ,CAACC,MAAD,EAAY;AACxB,SAAOA,OAAOC,MAAP,CAAc,UAACC,IAAD,QAAyB;AAAA;AAAA,QAAjBL,GAAiB;AAAA,QAAZM,MAAY;;AAC5C,QAAMC,YAAYR,IAAIC,GAAJ,CAAlB;AACA,QAAI,CAAC,mBAAQA,GAAR,CAAL,EAAmB;AACjB,YAAM,IAAIQ,SAAJ,EAAN;AACD;AACD,QAAIC,MAAMC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,0CAAWD,IAAX,sBAAoBC,OAAOK,GAAP,CAAWJ,SAAX,CAApB;AACD;AACD,wCAAWF,IAAX,IAAiBE,UAAUD,MAAV,CAAjB;AACD,GATM,EASJ,EATI,CAAP;AAUD,CAXD;;AAaA,IAAMM,YAAY,SAAZA,SAAY,CAACT,MAAD,EAASU,OAAT,EAAqB;AACrC,MAAIJ,MAAMC,OAAN,CAAcP,MAAd,CAAJ,EAA2B;AACzB,WAAOD,MAAMC,MAAN,CAAP;AACD,GAFD,MAEO,IAAI,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AACrC,WAAOS,UACLE,OAAOC,IAAP,CAAYZ,MAAZ,EAAoBQ,GAApB,CAAwB,UAACX,GAAD;AAAA,aAAS,CAACA,GAAD,EAAMG,OAAOH,GAAP,CAAN,CAAT;AAAA,KAAxB,CADK,EAELa,OAFK,CAAP;AAID;AACD,QAAM,IAAIL,SAAJ,EAAN;AACD,CAVD;;kBAYe,UAACQ,MAAD,EAASC,KAAT,EAAgBd,MAAhB,EAA2B;AACxC,MAAMe,MAAM,OAAOF,MAAP,KAAkB,QAAlB,GAA6B,EAACA,cAAD,EAASC,YAAT,EAAgBd,cAAhB,EAA7B,GAAuDa,MAAnE;;AAEA,MAAI,QAAOE,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIV,SAAJ,EAAN;AACD,GAFD,MAEO,IAAI,CAAC,oBAASU,IAAIF,MAAb,CAAL,EAA2B;AAChC,UAAM,IAAIR,SAAJ,CAAc,iBAAd,CAAN;AACD;;AAED,SAAO,CACLU,IAAIF,MADC,4BAED,OAAOE,IAAID,KAAX,KAAqB,WAArB,GAAmC,CAACC,IAAID,KAAL,CAAnC,GAAiD,EAFhD,sBAGD,OAAOC,IAAIf,MAAX,KAAsB,WAAtB,GAAoCS,UAAUM,IAAIf,MAAd,CAApC,GAA4D,EAH3D,GAILgB,IAJK,CAIA,GAJA,CAAP;AAKD,C","file":"format.js","sourcesContent":["import {quote, isToken, isScheme} from './util';\n\nconst xxx = (key) => (value) =>\n  `${key}=${value && !isToken(value) ? quote(value) : value}`;\n\nconst build = (params) => {\n  return params.reduce((prev, [key, values]) => {\n    const transform = xxx(key);\n    if (!isToken(key)) {\n      throw new TypeError();\n    }\n    if (Array.isArray(values)) {\n      return [...prev, ...values.map(transform)];\n    }\n    return [...prev, transform(values)];\n  }, []);\n};\n\nconst challenge = (params, options) => {\n  if (Array.isArray(params)) {\n    return build(params);\n  } else if (typeof params === 'object') {\n    return challenge(\n      Object.keys(params).map((key) => [key, params[key]]),\n      options\n    );\n  }\n  throw new TypeError();\n};\n\nexport default (scheme, token, params) => {\n  const obj = typeof scheme === 'string' ? {scheme, token, params} : scheme;\n\n  if (typeof obj !== 'object') {\n    throw new TypeError();\n  } else if (!isScheme(obj.scheme)) {\n    throw new TypeError('Invalid scheme.');\n  }\n\n  return [\n    obj.scheme,\n    ...(typeof obj.token !== 'undefined' ? [obj.token] : []),\n    ...(typeof obj.params !== 'undefined' ? challenge(obj.params) : []),\n  ].join(' ');\n};\n"]}